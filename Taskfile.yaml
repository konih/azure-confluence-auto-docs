version: '3'

dotenv: ['.env', '{{.ENV}}/.env.', '{{.HOME}}/.env']

vars:
  TAGS: "dev"
tasks:
  default:
    desc: Show the list of tasks
    cmds:
      - task --list  # Lists all available tasks

  gcloud-auth-tedi:
    desc: Gcloud auth impersonate service account for TEDI network project
    cmds:
      - task: gcloud-auth-create-config
        vars:
          SERVICE_ACCOUNT: "sa-terraform-env@tdi-b-seed-09c3.iam.gserviceaccount.com"
    aliases:
      - gcat

  # Terramate initialization task with tag-based filtering and alias
  terramate-init:
    desc: Initialize Terramate stack with TAGS (e.g., task tmi TAGS=sandbox:bootstrap)
    cmds:
      - mkdir -p .terraform-cache-dir
      - terramate generate  # Generates the stack configuration
      # Initializes all stacks with specified tags
      - terramate run --tags "{{.TAGS}}" terraform init --upgrade
    vars:
      TAGS:
        sh: echo "{{.TAGS}}"  # Placeholder for dynamically provided tags
    aliases: [ tmi ]  # Alias for quick execution
    requires:
      vars:
        - TAGS

  terramate-generate:
    desc: Generate Terramate stack
    cmds:
      - terramate generate  # Generates the stack configuration
    aliases: [ tmg ]  # Alias for quick execution

  # Terramate planning task with tag-based filtering and alias
  terramate-plan:
    desc: Plan Terramate stack  (e.g., task tmp TAGS=sandbox:bootstrap)
    cmds:
      - terramate generate  # Ensures the latest configuration is used
      - terramate run --tags "{{.TAGS}}" terraform plan -out out.tfplan # Plans all stacks with specified tags
    vars:
      TAGS:
        sh: echo "{{.TAGS}}"
    aliases: [ tmp ]  # Alias for quick execution
    requires:
      vars:
        - TAGS

  # Terramate apply task with tag-based filtering and alias
  terramate-apply-plan:
    desc: Apply Terramate stack from plan (e.g., task tma TAGS=sandbox:bootstrap)
    cmds:
      - terramate generate  # Generates stack configurations
      - terramate run --tags "{{.TAGS}}" terraform apply out.tfplan # Applies changes to all stacks with specified tags
    vars:
      TAGS:
        sh: echo "{{.TAGS}}"
    aliases: [ tmap ]  # Alias for quick execution
    requires:
      vars:
        - TAGS

    # Terramate apply task with tag-based filtering and alias
  terramate-apply:
    desc: Apply Terramate stack from plan (e.g., task tma TAGS=sandbox:bootstrap)
    cmds:
      - terramate generate  # Generates stack configurations
      - terramate run --tags "{{.TAGS}}" terraform apply # Applies changes to all stacks with specified tags
    vars:
      TAGS:
        sh: echo "{{.TAGS}}"
    aliases: [ tma ]  # Alias for quick execution
    requires:
      vars:
        - TAGS

  # Terramate apply with auto-approve task with tag-based filtering and alias
  terramate-apply-auto-approve:
    desc: Apply Terramate stack from plan with auto-approval (e.g., task tmaa TAGS=sandbox:bootstrap)
    cmds:

      - terramate generate  # Generates stack configurations
      - terramate run --tags "{{.TAGS}}" terraform apply -auto-approve
    vars:
      TAGS:
        sh: echo "{{.TAGS}}"
    aliases: [ tmaa ]  # Alias for quick execution
    requires:
      vars:
        - TAGS

  # Terramate apply task with tag-based filtering and alias
  terramate-validate:
    desc: Validate Terramate stack
    cmds:
      - terramate generate  # Generates stack configurations
      - terramate run --tags "{{.TAGS}}" terraform validate # Validates all stacks with specified tags
    vars:
      TAGS:
        sh: echo "{{.TAGS}}"
    aliases: [ tmv ]  # Alias for quick execution
    requires:
      vars:
        - TAGS

  infracost:
    desc: Generate Infracost report
    cmds:
      - infracost breakdown --path .  # Generates a cost report for the current path

  tflint:
    desc: Run TFLint to lint Terraform files
    cmds:
      - tflint  # Lints Terraform files to identify potential issues

  terraform-docs:
    desc: Generate documentation from Terraform files
    cmds:
      - terraform-docs markdown .  # Creates documentation in Markdown format for Terraform files

  pre-commit:
    desc: Run pre-commit hooks
    cmds:
      - pre-commit run --all-files  # Executes all configured pre-commit hooks

  bats-tests:
    desc: Run all BATS tests for bash scripts
    cmds:
      - cd scripts/bats-tests && bats  # Changes directory to bats-tests and runs BATS

  run-gitlab-comment:
    desc: Run the Python script
    cmds:
      - python3 scripts/gitlab-comment/gitlab_comment.py $CI_COMMIT_SHORT_SHA $CI_PROJECT_ID $GITLAB_ACCESS_TOKEN stacks --debug
    env:
      CI_COMMIT_SHORT_SHA: fd46efe  # Environment variable for commit SHA
      CI_PROJECT_ID: 57377180  # Environment variable for GitLab project ID
      GITLAB_ACCESS_TOKEN:  # Environment variable for GitLab access token (to be set in CI/CD settings)
    requires:
      env:
        - CI_COMMIT_SHORT_SHA
        - CI_PROJECT_ID
        - GITLAB_ACCESS_TOKEN
